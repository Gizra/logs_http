<?php

/**
 * @file
 * Logs HTTP module.
 */

use GuzzleHttp\Exception\RequestException;

/**
 * Runs on shutdown to clean up and display developer information.
 *
 * @see \Drupal\logs_http\EventSubscriber\LogsHttpEventSubscriber
 */
function logs_http_shutdown() {
  /** @var \Drupal\logs_http\Logger\LogsHttpLogger $logs_http_logger */
  $logs_http_logger = \Drupal::service('logs_http.logs_http_logger');
  if (!$logs_http_logger->isEnabled()) {
    return;
  }

  if (!$events = $logs_http_logger->getEvents()) {
    return;
  }

  $url = $logs_http_logger->getUrl();

  // Send events to logs.
  foreach ($events as $event) {
    // Allows to alter an event by adding new properties, or completely disable
    // sending an event to the log service by setting $event['send'] = FALSE;
    $event['send'] = TRUE;
    $module_handler = \Drupal::moduleHandler();
    $module_handler->alter('logs_http_event', $event);

    // If event does not want be sent, continue with the next one.
    if (empty($event['send'])) {
      continue;
    }

    unset($event['send']);
    $client = \Drupal::httpClient();

    try {
      // Send data to Logs.
      $client->post($url, [
        'json' => $event,
        'headers' => $logs_http_logger->getHttpHeaders(),
      ]);
    }
    catch (RequestException $e) {

    }
  }
}
